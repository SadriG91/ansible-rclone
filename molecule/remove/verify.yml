---
- name: Verify
  hosts: all
  vars_files: vars.yml

  tasks:
    - name: check github3.py state
      pip:
        name: github3.py
        state: absent
      register: rclone__pip_absent

    - name: assert pip state not changed
      assert:
        that:
          - not rclone__pip_absent.changed

    - name: stat paths and files used by the role
      stat:
        path: "{{ item }}"
      register: rclone__paths
      loop:
        - /etc/ansible/facts.d
        - /etc/ansible/facts.d/rclone.fact
        - "{{ rclone__binary }}"
        - "{{ rclone__binary | dirname }}"
        - "{{ rclone__man_path ~ '/rclone.1' }}"

    - name: assert none of the paths exist
      assert:
        that:
          - not item.stat.exists
      loop: "{{ rclone__paths.results }}"

    - name: stat custom man path
      stat:
        path: "{{ rclone__man_path }}"
      register: rclone__custom_man_path

    - name: that custom man path exists and is a directory
      assert:
        that:
          - rclone__custom_man_path.stat.exists
          - rclone__custom_man_path.stat.isdir
      when:
        - not ((
            ansible_facts.distribution == "CentOS" and
            ansible_facts.distribution_major_version is version('7', '=')
          ) or (
            ansible_facts.distribution == "Ubuntu" and
            ansible_facts.distribution_version is version('20.04', '=')
          ))

    - name: that custom man path doesn't exist on CentOS 7 and Ubuntu 20.04
      assert:
        that:
          - not rclone__custom_man_path.stat.exists
      when:
        - ((
            ansible_facts.distribution == "CentOS" and
            ansible_facts.distribution_major_version is version('7', '=')
          ) or (
            ansible_facts.distribution == "Ubuntu" and
            ansible_facts.distribution_version is version('20.04', '=')
          ))

    - name: stat rclone.conf files
      stat:
        path: "{{ file.path }}"
      register: rclone__config_paths
      loop: "{{ rclone__configs }}"
      loop_control:
        loop_var: file

    - name: assert no configurations exist
      assert:
        that:
          - not item.stat.exists
      loop: "{{ rclone__config_paths.results }}"

    - name: stat rclone.conf paths
      stat:
        path: "{{ file.path | dirname }}"
      register: rclone__config_paths
      loop: "{{ rclone__configs }}"
      loop_control:
        loop_var: file

    - name: assert no paths exist
      assert:
        that:
          - not item.stat.exists
      loop: "{{ rclone__config_paths.results }}"
