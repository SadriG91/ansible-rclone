---
- name: install EPEL for CentOS 7
  package:
    name: epel-release
  become: yes
  tags: "role::rclone.packages"
  when:
    - ansible_facts.distribution == "CentOS"
    - ansible_facts.distribution_major_version is version('7', '=')

- name: fix EPEL repo links for CentOS 7
  replace:
    path: /etc/yum.repos.d/epel.repo
    regexp: '^(metalink=http)s(.*)$'
    replace: '\1\2'
  become: yes
  tags: "role::rclone.packages"
  when:
    - ansible_facts.distribution == "CentOS"
    - ansible_facts.distribution_major_version is version('7', '=')

- name: ensure python3-apt for Debian-based OS
  apt:
    name: python3-apt
    state: present
    update_cache: yes
  become: yes
  check_mode: no
  tags: "role::rclone.packages"
  when:
    - ansible_facts.os_family == "Debian"

- name: install required packages
  package:
    name: "{{ ( [
      'unzip'
    ] + rclone__os_packages|d([]) ) | flatten }}"
    state: present
  become: yes
  tags: "role::rclone.packages"

- block:
    - name: ensure latest pip and setuptools
      pip:
        name:
          - pip>=20
      become: yes
      tags: "role::rclone.pip"

    - name: install github module
      pip:
        name:
          - github3.py>=1.0.0a3
      become: yes
      tags: "role::rclone.pip"

    - name: detect latest rclone release from github
      github_release:
        action: latest_release
        user: rclone
        repo: rclone
      register: _rclone__latest_github

    - name: set fact to latest github version
      set_fact:
        _rclone__version: "{{ _rclone__latest_github.tag }}"

  when: rclone__version == "latest_github"
  tags: "role::rclone.github"

- block:
    - name: check rclone latest beta version
      uri:
        url: https://beta.rclone.org/version.txt
        return_content: true
      register: _rclone__latest_beta

    - name: set fact to latest beta version
      set_fact:
        _rclone__version: "{{ _rclone__latest_beta.content.split(' ')[1] | trim }}"

  when: rclone__version == "beta"
  tags: "role::rclone.beta"

- block:
    - name: check rclone latest stable version
      uri:
        url: https://downloads.rclone.org/version.txt
        return_content: true
      register: _rclone__latest

    - name: set fact to latest stable version
      set_fact:
        _rclone__version: "{{ _rclone__latest.content.split(' ')[1] | trim }}"

  when: rclone__version is undefined or rclone__version == "latest"
  tags: "role::rclone.stable"

- name: set fact to numeric version
  set_fact:
    _rclone__version: "{{ rclone__version }}"
  when:
    - rclone__version is defined
    - rclone__version != "latest_github"
    - rclone__version != "latest"
    - rclone__version != "beta"
  tags: "role::rclone.stable"

- block:
    - name: Make sure that Ansible local facts directory exists
      file:
        path: /etc/ansible/facts.d
        state: directory
        mode: '0755'

    - name: save rclone local facts
      template:
        src: etc/ansible/facts.d/rclone.fact.j2
        dest: /etc/ansible/facts.d/rclone.fact
        mode: '0755'

  become: yes
  tags: "role::rclone.facts"

- block:
    - name: create temporary directory
      tempfile:
        state: directory
      register: rclone__temp

    - name: "get rclone {{ _rclone__version }} from github"
      unarchive:
        creates: "{{ rclone__temp.path }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}"
        dest: "{{ rclone__temp.path }}"
        mode: 0755
        remote_src: yes
        src: https://github.com/rclone/rclone/releases/download/{{ _rclone__version }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}.zip
      when: rclone__version == "latest_github"
      tags: "role::rclone.github"

    - name: "get rclone {{ _rclone__version }} from beta URL"
      unarchive:
        creates: "{{ rclone__temp.path }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}"
        dest: "{{ rclone__temp.path }}"
        mode: 0755
        remote_src: yes
        src: https://beta.rclone.org/rclone-beta-latest-linux-{{ rclone__go_arch }}.zip
      when: rclone__version == "beta"
      tags: "role::rclone.beta"

    - name: "get rclone {{ _rclone__version }} from stable URL"
      unarchive:
        creates: "{{ rclone__temp.path }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}"
        dest: "{{ rclone__temp.path }}"
        mode: 0755
        remote_src: yes
        src: https://downloads.rclone.org/{{ _rclone__version }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}.zip
      when:
        - not rclone__version == "latest_github"
        - not rclone__version == "beta"
      tags: "role::rclone.stable"

    - name: ensure rclone path exists
      file:
        state: directory
        path: "{{ rclone__binary | dirname }}"
        mode: "{{ rclone__dirname_mode }}"
      become: yes

    - name: copy rclone binary
      copy:
        src: "{{ rclone__temp.path }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}/rclone"
        dest: "{{ rclone__binary }}"
        mode: "{{ rclone__binary_mode }}"
        owner: "{{ rclone__user }}"
        group: "{{ rclone__group }}"
        remote_src: true
      become: yes

    - block:
        - name: install man packages
          package:
            name: man-db
          tags: "role::rclone.packages"

        - name: Make dir for local manpages
          file:
            path: "{{ rclone__man_path }}"
            state: directory
            mode: "0755"

        - name: Copy rclone manpage
          copy:
            src: "{{ rclone__temp.path }}/rclone-{{ _rclone__version }}-linux-{{ rclone__go_arch }}/rclone.1"
            dest: "{{ rclone__man_path }}/rclone.1"
            mode: "0644"
            remote_src: true

        - name: Update mandb
          command: mandb
          changed_when: false

      become: yes
      when: rclone__install_man
      tags: "role::rclone.man"

    - name: remove the temporary directory
      file:
        path: "{{ rclone__temp.path }}"
        state: absent
      when: rclone__temp.path is defined

  when:
    (not ansible_local.rclone.installed|d(false)) or
    (ansible_local.rclone.version is defined and
     ansible_local.rclone.version is version(_rclone__version, '<>'))
  tags: "role::rclone.install"

- include_tasks: configure.yml
  args:
    apply:
      tags: "role::rclone.configure"
  loop: "{{ rclone__configs }}"
  loop_control:
    loop_var: config
  when:
    - rclone__configure
    - rclone__configs != []
  tags: "role::rclone.configure"
...
